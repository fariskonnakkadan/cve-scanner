import csv
import re
import subprocess

print("Make sure package_names.txt file contains package names.")

def updateDatabase():
    url = "https://cve.mitre.org/data/downloads/allitems.csv"
    output_file = "mitre.csv"
    answer=input("Do you want to update Database ? (y/n)")
    if (answer == "y"):
        # run 'axel' command to download file
        test = subprocess.run(["rm", "mitre.csv"])
        result = subprocess.run(["axel", "-n 20", url, "-o", output_file])
        # check command's return code
        if result.returncode == 0:
            print(f"Successfully downloaded {output_file}")
            # Open the input file in read mode
            test = subprocess.run(["sed", "-i", "-e", "1,2d", "mitre.csv"])
            

        else:
            print(f"Failed to download {output_file}")
    else:
        print("Resuming with previous database.")



# read package names from text file
updateDatabase()
with open('package_names.txt', 'r') as f:
    package_names = [line.strip() for line in f]

# compile regular expression patterns
patterns = [re.compile(r'\b' + package_name + r'\b') for package_name in package_names]
print(patterns)
# open MITRE CSV file
with open('mitre.csv', 'r', encoding='utf-8', errors='replace') as f:
    reader = csv.DictReader(f)
    
    # read all rows into a list
    rows = list(reader)

    # search for package names in MITRE CSV file
    found_packages = []
    for pattern in patterns:
        for row in rows:
            try:
                if pattern.search(row['Description']):
                    found_packages.append({'Description': row['Description'], 'Name': row['Name'], 'Pattern': pattern})
            except UnicodeDecodeError:
                # replace offending characters
                row['Description'] = row['Description'].encode('utf-8', errors='replace').decode('utf-8')
                row['Name'] = row['Name'].encode('utf-8', errors='replace').decode('utf-8')
                if pattern.search(row['Description']):
                    found_packages.append({'Description': row['Description'], 'Name': row['Name'], 'Pattern': pattern})

# print found packages
for package in found_packages:
    print(f"Description: {package['Description']}")
    print(f"Name: {package['Name']}")

# write found packages to output CSV file
with open('output.csv', 'w', newline='') as f:
    fieldnames = ['Description', 'Name', 'Pattern']
    writer = csv.DictWriter(f, fieldnames=fieldnames)

    # write header row
    writer.writeheader()

    # write data rows
    for package in found_packages:
        writer.writerow(package)

